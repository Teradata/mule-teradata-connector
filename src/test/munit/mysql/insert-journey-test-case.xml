<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<munit:config name="InsertJourney.xml" minMuleVersion="4.3.0"/>
	<munit:before-suite name="InsertJourneyBefore_Suite" >
		<flow-ref name="CreateTableInDatabaseFlow" />
	</munit:before-suite>
	<munit:test name="SingleInsertTestCase" >
		<munit:behavior>
			<db:select config-ref="dbConfigMySQL">
				<db:sql ><![CDATA[SELECT * FROM flights;]]></db:sql>
			</db:select>
		</munit:behavior>
		<munit:execution>
			<flow-ref name="SimpleCaseSetupFlow" />
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals actual="#[payload.affectedRows]" expected="#[1]"/>
			<db:select config-ref="dbConfigMySQL">
				<db:sql><![CDATA[SELECT start from flights where start = "NY";]]></db:sql>
			</db:select>
			<ee:transform>
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert-equals actual="#[payload.start[0]]" expected='#["NY"]' message='The element must be "NY"' />
		</munit:validation>
	</munit:test>
	<munit:test name="ComplexQueryInsertTestCase" >
		<munit:execution >
			<db:insert config-ref="dbConfigMySQL">
				<db:sql ><![CDATA[INSERT IGNORE INTO flights(start, destination) VALUES("NY", "BR"); ]]></db:sql>
			</db:insert>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert-equals actual="#[payload.affectedRows]" expected="#[1]" />
			<db:select config-ref="dbConfigMySQL" >
				<db:sql ><![CDATA[SELECT start from flights where start = "NY";]]></db:sql>
			</db:select>
			<ee:transform >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert-equals actual="#[payload.start[0]]" expected='#["NY"]' message='The element must be "NY"' />
		</munit:validation>
	</munit:test>
	<munit:test name="InputParametersInsertTestCase" >
		<munit:execution >
			<db:insert config-ref="dbConfigMySQL" >
				<db:sql ><![CDATA[INSERT INTO flights(start, destination) VALUES(:newYork, :brazil); ]]></db:sql>
				<db:input-parameters ><![CDATA[#[{
newYork: "NY",
brazil: "BR"
}]]]></db:input-parameters>
			</db:insert>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals actual="#[payload.affectedRows]" expected="#[1]" />
			<db:select config-ref="dbConfigMySQL" >
				<db:sql ><![CDATA[SELECT start from flights where destination = "BR";]]></db:sql>
			</db:select>
			<ee:transform >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert-equals actual="#[payload.start[0]]" expected='#["NY"]' message='The element must be "NY"' />
		</munit:validation>
	</munit:test>
	<munit:test name="TransactionalActionsAlwaysJoinPositiveInsertTestCase" >
		<munit:execution >
			<try transactionalAction="ALWAYS_BEGIN">
				<db:insert config-ref="dbConfigMySQL" target="singleInsert">
				<db:sql><![CDATA[INSERT INTO flights(start, destination) VALUES(:newYork, :brazil); ]]></db:sql>
				<db:input-parameters><![CDATA[#[{
newYork: "NY",
brazil: "BR"
}]]]></db:input-parameters>
			</db:insert>
				<db:insert config-ref="dbConfigMySQL" transactionalAction="ALWAYS_JOIN">
					<db:sql ><![CDATA[INSERT INTO flights(start, destination) VALUES(:newYork, :brazil); ]]></db:sql>
					<db:input-parameters ><![CDATA[#[{
newYork: "NY",
brazil: "BR"
}]]]></db:input-parameters>
				</db:insert>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals actual="#[payload.affectedRows]" expected="#[1]" />
			<db:select config-ref="dbConfigMySQL" >
				<db:sql ><![CDATA[SELECT start from flights where start = "NY";]]></db:sql>
			</db:select>
			<ee:transform >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert-equals actual="#[payload.start[0]]" expected='#["NY"]' message='The element must be "NY"' />
		</munit:validation>
	</munit:test>
	<munit:test name="TransactionalActionsAlwaysJoinNegativeInsertTestCase" expectedErrorType="MULE:UNKNOWN">
		<munit:execution >
			<db:insert config-ref="dbConfigMySQL" transactionalAction="ALWAYS_JOIN" >
				<db:sql ><![CDATA[INSERT INTO flights(start, destination) VALUES(:newYork, :brazil); ]]></db:sql>
				<db:input-parameters ><![CDATA[#[{
newYork: "NY",
brazil: "BR"
}]]]></db:input-parameters>
			</db:insert>
		</munit:execution>
	</munit:test>
	<munit:test name="JoinIfPossiblePositiveInsertTestCase" >
		<munit:execution >
			<try transactionalAction="ALWAYS_BEGIN">
				<db:insert config-ref="dbConfigMySQL">
					<db:sql><![CDATA[INSERT INTO flights(start, destination) VALUES(:newYork, :brazil); ]]></db:sql>
					<db:input-parameters><![CDATA[#[{
newYork: "NY",
brazil: "BR"
}]]]></db:input-parameters>
				</db:insert>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals actual="#[payload.affectedRows]" expected="#[1]" />
			<db:select config-ref="dbConfigMySQL">
				<db:sql><![CDATA[SELECT start from flights where start = "NY";]]></db:sql>
			</db:select>
			<ee:transform>
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert-equals actual="#[payload.start[0]]" expected='#["NY"]' message='The element must be "NY"' />
		</munit:validation>
	</munit:test>
	<munit:test name="JoinNotSupportedPositiveInsertTestCase" >
		<munit:execution >
			<try transactionalAction="ALWAYS_BEGIN">
				<db:insert config-ref="dbConfigMySQL">
					<db:sql><![CDATA[INSERT INTO flights(start, destination) VALUES(:newYork, :brazil); ]]></db:sql>
					<db:input-parameters><![CDATA[#[{
newYork: "NY",
brazil: "BR"
}]]]></db:input-parameters>
				</db:insert>
				<db:insert config-ref="dbConfigMySQL" transactionalAction="NOT_SUPPORTED">
					<db:sql><![CDATA[INSERT INTO flights(start, destination) VALUES(:newYork, :brazil); ]]></db:sql>
					<db:input-parameters><![CDATA[#[{
newYork: "NY",
brazil: "BR"
}]]]></db:input-parameters>
				</db:insert>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals actual="#[payload.affectedRows]" expected="#[1]" />
			<db:select config-ref="dbConfigMySQL">
				<db:sql><![CDATA[SELECT start from flights where start = "NY";]]></db:sql>
			</db:select>
			<ee:transform>
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert-equals actual="#[payload.start[0]]" expected='#["NY"]' message='The element must be "NY"' />
		</munit:validation>
	</munit:test>
	<munit:test name="JoinNotSupportedNegativeInsertTestCase" >
		<munit:execution >
			<db:insert config-ref="dbConfigMySQL" maxRows="#[2]">
					<db:sql><![CDATA[INSERT INTO flights(start, destination) VALUES(:newYork, :brazil);]]></db:sql>
					<db:input-parameters><![CDATA[#[{
newYork: "NY",
brazil: "BR"
}]]]></db:input-parameters>
				</db:insert>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals actual="#[payload.affectedRows]" expected="#[1]" />
			<db:select config-ref="dbConfigMySQL">
				<db:sql><![CDATA[SELECT start from flights where start = "NY";]]></db:sql>
			</db:select>
			<ee:transform >
				<ee:message>
					<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert-equals actual="#[payload.start[0]]" expected='#["NY"]' message='The element must be "NY"' />
		</munit:validation>
	</munit:test>
	<munit:test name="AutoGenerateKeysIndexesExpressionInsertTestCase" >
		<munit:behavior >
			<flow-ref name="DropFlightsTable"/>
			<flow-ref name="CreateTableInDatabaseFlow"/>
		</munit:behavior>
		<munit:execution >
			<db:insert config-ref="dbConfigMySQL" autoGenerateKeys="true" autoGeneratedKeysColumnIndexes='#[[1]]'>
				<db:sql ><![CDATA[INSERT INTO flights(start, destination) VALUES(:newYork, :brazil), (:argentina, :italia), (:newYork, :italia); ]]></db:sql>
				<db:input-parameters ><![CDATA[#[{
newYork: "NY",
brazil: "BR",
argentina: "AR",
italia: "IT"
}]]]></db:input-parameters>
			</db:insert>
		</munit:execution>
		<munit:validation >
			<ee:transform >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<munit-tools:assert-equals actual="#[payload.generatedKeys[0]]" expected="#[1]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="AutoGenerateKeysIndexesInlineInsertTestCase" >
			<munit:behavior >
			<flow-ref name="DropFlightsTable" />
			<flow-ref name="CreateTableInDatabaseFlow" />
		</munit:behavior>
		<munit:execution>
				<db:insert config-ref="dbConfigMySQL" autoGenerateKeys="true">
					<db:sql><![CDATA[INSERT INTO flights(start, destination) VALUES(:newYork, :brazil), (:argentina, :italia), (:newYork, :italia); ]]></db:sql>
					<db:input-parameters><![CDATA[#[{
newYork: "NY",
brazil: "BR",
argentina: "AR",
italia: "IT"
}]]]></db:input-parameters>
				<db:auto-generated-keys-column-indexes >
					<db:auto-generated-keys-column-index value="1" />
				</db:auto-generated-keys-column-indexes>
				</db:insert>
			</munit:execution>
			<munit:validation>
				<ee:transform>
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<munit-tools:assert-equals actual="#[payload.generatedKeys[0]]" expected="#[1]" />
			</munit:validation>
		</munit:test>
	<munit:test name="AutoGenerateKeysNamesExpressionInsertTestCase" >
		<munit:behavior >
			<flow-ref name="DropFlightsTable" />
			<flow-ref name="CreateTableInDatabaseFlow" />
		</munit:behavior>
		<munit:execution>
				<db:insert config-ref="dbConfigMySQL" autoGenerateKeys="true" autoGeneratedKeysColumnNames='#[["start"]]'>
					<db:sql><![CDATA[INSERT INTO flights(start, destination) VALUES(:newYork, :brazil), (:argentina, :italia), (:newYork, :italia); ]]></db:sql>
					<db:input-parameters><![CDATA[#[{
newYork: "NY",
brazil: "BR",
argentina: "AR",
italia: "IT"
}]]]></db:input-parameters>
				</db:insert>
			</munit:execution>
			<munit:validation>
				<ee:transform>
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<munit-tools:assert-equals actual="#[payload.generatedKeys[0]]" expected="#[1]" />
			</munit:validation>
		</munit:test>
	<munit:test name="AutoGenerateKeysNamesInlineInsertTestCase" >
		<munit:behavior >
			<flow-ref name="DropFlightsTable" />
			<flow-ref name="CreateTableInDatabaseFlow" />
		</munit:behavior>
		<munit:execution>
				<db:insert config-ref="dbConfigMySQL" autoGenerateKeys="true">
					<db:sql><![CDATA[INSERT INTO flights(start, destination) VALUES(:newYork, :brazil), (:argentina, :italia), (:newYork, :italia); ]]></db:sql>
					<db:input-parameters><![CDATA[#[{
newYork: "NY",
brazil: "BR",
argentina: "AR",
italia: "IT"
}]]]></db:input-parameters>
				<db:auto-generated-keys-column-names >
					<db:auto-generated-keys-column-name value='"start"' />
				</db:auto-generated-keys-column-names>
				</db:insert>
			</munit:execution>
			<munit:validation>
				<ee:transform>
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<munit-tools:assert-equals actual="#[payload.generatedKeys[0]]" expected="#[1]" />
			</munit:validation>
		</munit:test>
	<munit:after-test name="insert-journey-test-caseAfter_Test" doc:id="874fe55a-54b1-4232-9268-360cab5c3ab3" >
		<flow-ref name="TruncateTableFlow" />
	</munit:after-test>
	<munit:after-suite name="InsertJourneyAfter_Suite">
		<flow-ref name="DropFlightsTable"/>
	</munit:after-suite>

</mule>
