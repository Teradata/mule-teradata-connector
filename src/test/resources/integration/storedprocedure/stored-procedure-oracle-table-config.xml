<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:teradata="http://www.mulesoft.org/schema/mule/teradata"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
            http://www.mulesoft.org/schema/mule/teradata http://www.mulesoft.org/schema/mule/teradata/current/mule-teradata.xsd">

    <flow name="insertTableTypeWithMapping">
        <teradata:stored-procedure config-ref="dbConfig">
            <teradata:sql >{ call INSERT_FRUIT_AS_TABLE(:in) }</teradata:sql>
            <teradata:input-parameters >#[{
                in : payload map ({
                fruitID: $.fruitID,
                fruitName: $.fruitName,
                fruitQuantity: $.fruitQuantity
                } as Object {class : "org.mule.extension.db.integration.select.Fruit"}) }]
            </teradata:input-parameters>
        </teradata:stored-procedure>
    </flow>

    <flow name="insertTableType2WithMapping">
        <teradata:stored-procedure config-ref="dbConfig">
            <teradata:sql >{ call INSERT_FRUIT_AS_TYPE(:in) }</teradata:sql>
            <teradata:input-parameters >#[{
                in : payload map ({
                fruitID: $.fruitID,
                fruitName: $.fruitName,
                fruitQuantity: $.fruitQuantity
                } as Object {class : "org.mule.extension.db.integration.select.Fruit"}) }]
            </teradata:input-parameters>
        </teradata:stored-procedure>
    </flow>

    <flow name="returnTableTypeWithMapping">
        <teradata:stored-procedure config-ref="dbConfig">
            <teradata:sql >{ call CREATE_FRUIT_TABLE(:out) }</teradata:sql>
            <teradata:output-parameters>
                <teradata:output-parameter key="out" customType="SYSTEM.FRUIT_ORDER_CONTENTS_TABLE"/>
            </teradata:output-parameters>
        </teradata:stored-procedure>
    </flow>

    <flow name="insertTableType">
        <teradata:stored-procedure config-ref="dbConfig">
            <teradata:sql >{ call INSERT_FRUIT_AS_TABLE(:in) }</teradata:sql>
            <teradata:input-parameters >#[{
                in : payload map [$.fruitID, $.fruitName, $.fruitQuantity]
                }]
            </teradata:input-parameters>
        </teradata:stored-procedure>
    </flow>

    <flow name="insertTableType2">
        <teradata:stored-procedure config-ref="dbConfig">
            <teradata:sql >{ call INSERT_FRUIT_AS_TYPE(:in) }</teradata:sql>
            <teradata:input-parameters >#[{
                in : payload map [$.fruitID, $.fruitName, $.fruitQuantity]
                }]
            </teradata:input-parameters>
        </teradata:stored-procedure>
    </flow>

    <flow name="returnTableType">
        <teradata:stored-procedure config-ref="dbConfig">
            <teradata:sql >{ call CREATE_FRUIT_TABLE(:out) }</teradata:sql>
            <teradata:output-parameters>
                <teradata:output-parameter key="out"/>
            </teradata:output-parameters>
        </teradata:stored-procedure>
    </flow>

    <flow name="storedProcedureWithNestedArrayTypeOutputParamSerialized">
        <teradata:stored-procedure config-ref="dbConfig">
            <teradata:sql >{ call SYSTEM.STORE_PROCEDURE_NESTED_TYPES(:IN_VALUE, :OUT_VALUE, :RSL) }</teradata:sql>
            <teradata:input-parameters>#[%dw 2.0
                output application/java
                ---
                {
                    IN_VALUE: teradata::createArray("dbConfig","CREATE_LIST_INPUT",
                        [teradata::createStruct("dbConfig","CREATE_LIST_INPUT_OBJ", [vars.number, vars.varchar])])
                }]
            </teradata:input-parameters>
            <teradata:output-parameters >
                <teradata:output-parameter key="OUT_VALUE" customType="CREATE_LIST_OUTPUT" />
                <teradata:output-parameter key="RSL" customType="OUTPUT_RESPONSE" />
            </teradata:output-parameters>
        </teradata:stored-procedure>
        <set-payload value="#[output application/json --- payload]"/>
    </flow>

    <flow name="storedProcedureWithNestedObjectTypeOutputParamSerialized">
        <teradata:stored-procedure config-ref="dbConfig">
            <teradata:sql >{ call SYSTEM.STORED_PROCEDURE_NESTED_OBJECT_TYPE(:RESPONSE) }</teradata:sql>
            <teradata:output-parameters >
                <teradata:output-parameter key="RESPONSE" customType="OBJECT_WITH_INNER_OBJECT_TYPE" />
            </teradata:output-parameters>
        </teradata:stored-procedure>
        <set-payload value="#[output application/json --- payload]"/>
    </flow>

    <flow name="selectFromFruitsTable">
        <teradata:select config-ref="dbConfig">
            <teradata:sql>#["SELECT * FROM FRUITS_AS_TABLE WHERE" + (payload map $$) reduce ((item, accumulator) -> accumulator ++ "$(if (item == 0) '' else ' OR') (fruitID = :id$(item))")]</teradata:sql>
            <teradata:input-parameters>
                #[payload map ((item, index) -> {pos : index, val : item})
                reduce ((item, accumulator = {}) -> accumulator ++ {"id$(item.pos)" : item.val})]
            </teradata:input-parameters>
        </teradata:select>
    </flow>

    <flow name="selectFromFruitsTable2">
        <teradata:select config-ref="dbConfig">
            <teradata:sql>#["SELECT * FROM FRUITS_AS_TYPE F WHERE" + (payload map $$) reduce ((item, accumulator) -> accumulator ++ "$(if (item == 0) '' else ' OR') (F.FRUIT.FRUITID = :id$(item))")]</teradata:sql>
            <teradata:input-parameters>
                #[payload map ((item, index) -> {pos : index, val : item})
                reduce ((item, accumulator = {}) -> accumulator ++ {"id$(item.pos)" : item.val})]
            </teradata:input-parameters>
        </teradata:select>
    </flow>

    <flow name="insertStruct">
        <teradata:insert config-ref="dbConfig">
            <teradata:sql>INSERT INTO FRUITS_AS_TYPE (fruit) VALUES (:fruit)</teradata:sql>
            <teradata:input-parameters>
                #[{
                    fruit : [payload.fruitID, payload.fruitName, payload.fruitQuantity]
                }]
            </teradata:input-parameters>
        </teradata:insert>
    </flow>

    <flow name="insertStructWithMapping">
        <teradata:insert config-ref="dbConfig">
            <teradata:sql>INSERT INTO FRUITS_AS_TYPE (fruit) VALUES (:fruit)</teradata:sql>
            <teradata:input-parameters>
                #[{
                fruit : {
                    fruitID: payload.fruitID,
                    fruitName: payload.fruitName,
                    fruitQuantity: payload.fruitQuantity
                } as Object {class : "org.mule.extension.db.integration.select.Fruit"}
                }]
            </teradata:input-parameters>
        </teradata:insert>
    </flow>

</mule>
